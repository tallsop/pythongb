"""
Memory Map
------------
"""


class MemoryController():
    bios = [0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb,
            0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e, 0x11, 0x3e,
            0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e,
            0x77, 0x77, 0x3e, 0xfc, 0xe0, 0x47, 0x11, 0x04, 0x01,
            0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96,
            0x00, 0x13, 0x7b, 0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8,
            0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20,
            0xf9, 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
            0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9,
            0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0,
            0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04, 0x1e, 0x02, 0x0e,
            0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20,
            0xf7, 0x1d, 0x20, 0xf2, 0x0e, 0x13, 0x24, 0x7c, 0x1e,
            0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64,
            0x20, 0x06, 0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0,
            0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
            0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5,
            0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17, 0x05, 0x20,
            0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66,
            0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
            0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88,
            0x89, 0x00, 0x0e, 0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd,
            0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec,
            0xcc, 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e,
            0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x21,
            0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20,
            0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20, 0xf5, 0x06, 0x19,
            0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe,
            0x3e, 0x01, 0xe0, 0x50]

    def __init__(self):
        self.currBank = 1
        self.bios_use = True

        self.rom = bytearray(0x8000)  # 0x0000 - 0x8000
        self.vram = bytearray(0xA000 - 0x8000)  # 0x8000 - 0xA000
        self.eram = bytearray(0xC000 - 0xA000)  # 0xA000 - 0xC000
        self.wram = bytearray(
            0xE000 -
            0xC000)  # 0xC000 - 0xE000 Echoed to: 0xE000 - 0xFE00
        self.oam = bytearray(0xFEA0 - 0xFE00)  # 0xFE00 - 0xFEA0
        # 0xFEA0 - 0xFF00 Unused
        self.io = bytearray(0xFF4C - 0xFF00)  # 0xFF00- 0xFF4C
        # 0xFF4C - 0xFF80 is empty
        self.ram = bytearray(0xFFFF - 0xFF80)  # 0xFF80 - 0xFFFF

    def read(self, loc):
        # At the start of the emulation the bios is in use
        if self.bios_use:
            if (loc - 0x100) >= len(MemoryController.bios) - 1:
                self.bios_use = False

            return MemoryController.bios[loc - 0x100]
        if loc < 0x4000:
            return self.rom[loc]
        elif loc < 0x8000:
            return self.rom[0x4000 * currBank + (loc - 0x4000)]
        elif loc < 0xA000:
            return self.vram[loc - 0x8000]
        elif loc < 0xC000:
            return self.eram[loc - 0xA000]
        elif loc < 0xE000:
            return self.wram[loc - 0xC000]
        elif loc < 0xFE00:
            return self.wram[loc - 0xE000]
        elif loc < 0xFEA0:
            return self.oam[loc - 0xFE00]
        elif loc < 0xFF4C:
            return self.io[loc - 0xFF00]
        elif loc < 0xFFFF:
            return self.ram[loc - 0xFF80]

        return 0

    def write(self, loc, data):
        if loc >= 0x2000 and loc <= 0x4000:
            self.currBank = data
        elif loc < 0x8000:
            self.rom[loc] = data
        elif loc < 0xA000:
            self.vram[loc - 0x8000] = data
        elif loc < 0xC000:
            self.eram[loc - 0xA000] = data
        elif loc < 0xE000:
            self.wram[loc - 0xC000] = data
        elif loc < 0xFE00:
            self.wram[loc - 0xE000] = data
        elif loc < 0xFEA0:
            self.oam[loc - 0xFE00] = data
        elif loc < 0xFF4C:
            self.io[loc - 0xFF00] = data
        elif loc < 0xFFFF:
            self.ram[loc - 0xFF80] = data

    def readROM(self, rom):
        # Put the ROM into memory
        stream = open(rom, "rb")

        romArray = bytearray(stream.read())
        stream.close()

        # Place this in memory
        self.rom = romArray
